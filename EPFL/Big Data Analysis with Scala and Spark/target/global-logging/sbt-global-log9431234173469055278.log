[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ISSAMU~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ISSAMU~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 78.9904ms
[debug]       Load.loadUnit: defsScala took 0.5561ms
[debug] [Loading] Scanning directory C:\Users\Issamu Umeda\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Issamu Umeda\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.3015 ms
[debug]           Load.resolveProject(global-plugins) took 35.6164ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Issamu Umeda\.sbt\1.0\plugins, plugins: List(<none>))) took 61.7921ms
[debug] [Loading] Done in C:\Users\Issamu Umeda\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 80.8766ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2677ms
[debug]     Load.loadUnit(file:/C:/Users/Issamu%20Umeda/.sbt/1.0/plugins/, ...) took 169.6658ms
[debug]   Load.apply: load took 426.864ms
[debug]   Load.apply: resolveProjects took 4.0336ms
[debug]   Load.apply: finalTransforms took 41.1903ms
[debug]   Load.apply: config.delegates took 4.834ms
[debug]   Load.apply: Def.make(settings)... took 326.4868ms
[debug]   Load.apply: structureIndex took 92.7091ms
[debug]   Load.apply: mkStreams took 1.6472ms
[info] loading global plugins from C:\Users\Issamu Umeda\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 51241.3592ms
[debug]           Load.loadUnit: plugins took 31.9932ms
[debug]           Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark\project
[debug]             Load.loadUnit: mkEval took 3.8995ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4503 ms
[info] loading settings for project big-data-analysis-with-scala-and-spark-build from idea.sbt ...
[debug]               Load.resolveProject(big-data-analysis-with-scala-and-spark-build) took 9.6114ms
[debug]             Load.loadTransitive: finalizeProject(Project(id big-data-analysis-with-scala-and-spark-build, base: C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark\project, plugins: List(<none>))) took 11.501ms
[debug] [Loading] Done in C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark\project, returning: (big-data-analysis-with-scala-and-spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2144.4827ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.2415ms
[debug]         Load.loadUnit(file:/C:/Users/Issamu%20Umeda/Documents/GitHub/Data-Science-study/EPFL/Big%20Data%20Analysis%20with%20Scala%20and%20Spark/project/, ...) took 2183.5028ms
[debug]       Load.apply: load took 2185.222ms
[debug]       Load.apply: resolveProjects took 0.1258ms
[debug]       Load.apply: finalTransforms took 21.3172ms
[debug]       Load.apply: config.delegates took 0.3759ms
[debug]       Load.apply: Def.make(settings)... took 81.1459ms
[debug]       Load.apply: structureIndex took 29.526ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4822.613ms
[debug]     Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark
[debug]       Load.loadUnit: mkEval took 0.2379ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2046 ms
[info] loading settings for project big-data-analysis-with-scala-and-spark from build.sbt ...
[debug]         Load.resolveProject(big-data-analysis-with-scala-and-spark) took 26.5655ms
[debug]       Load.loadTransitive: finalizeProject(Project(id big-data-analysis-with-scala-and-spark, base: C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark, plugins: List(<none>))) took 29.8064ms
[debug] [Loading] Done in C:\Users\Issamu Umeda\Documents\GitHub\Data-Science-study\EPFL\Big Data Analysis with Scala and Spark, returning: (big-data-analysis-with-scala-and-spark)
[debug]     Load.loadUnit: loadedProjectsRaw took 967.1411ms
[debug]     Load.loadUnit: cleanEvalClasses took 12.9039ms
[debug]   Load.loadUnit(file:/C:/Users/Issamu%20Umeda/Documents/GitHub/Data-Science-study/EPFL/Big%20Data%20Analysis%20with%20Scala%20and%20Spark/, ...) took 5803.55ms
[debug] Load.apply: load took 5805.7195ms
[debug] Load.apply: resolveProjects took 0.0778ms
[debug] Load.apply: finalTransforms took 25.5ms
[debug] Load.apply: config.delegates took 0.3065ms
[debug] Load.apply: Def.make(settings)... took 57.0643ms
[debug] Load.apply: structureIndex took 25.2574ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to Big Data Analysis with Scala and Spark (in build file:/C:/Users/Issamu%20Umeda/Documents/GitHub/Data-Science-study/EPFL/Big%20Data%20Analysis%20with%20Scala%20and%20Spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64041 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64041, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Big Data Analysis with Scala and Spark (in build file:/C:/Users/Issamu%20Umeda/Documents/GitHub/Data-Science-study/EPFL/Big%20Data%20Analysis%20with%20Scala%20and%20Spark/)
[debug] > Exec(idea-shell, None, None)
